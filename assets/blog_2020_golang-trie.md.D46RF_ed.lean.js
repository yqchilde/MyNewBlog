import{_ as t}from"./chunks/articleMetadata.BUvlmdsD.js";import{_ as k,m as e,a as r,u as E,B as d,e as n,x as g,aj as c,o as l,p as y,q as F}from"./chunks/framework.BKaFImy5.js";import"./chunks/theme.DHWrSUup.js";const o="/assets/20200328174533.CnZXTIaG.png",S=JSON.parse('{"title":"Golang实现简单Trie树","description":"Trie又称字典树，是N叉树的一种特殊形式。是一种存储大量字符串的树形数据结构，相当于`HashMap`，在存储单词中又比`HashMap`节省了很多的内存空间。`trie`树的根节点不存储内容，内容都在孩子节点上。","frontmatter":{"title":"Golang实现简单Trie树","description":"Trie又称字典树，是N叉树的一种特殊形式。是一种存储大量字符串的树形数据结构，相当于`HashMap`，在存储单词中又比`HashMap`节省了很多的内存空间。`trie`树的根节点不存储内容，内容都在孩子节点上。","date":"2020-03-28T11:20:13.000Z","tags":["Golang"]},"headers":[],"relativePath":"blog/2020/golang-trie.md","filePath":"posts/blog/2020/golang-trie/README.md","lastUpdated":1714486196000}'),u={name:"blog/2020/golang-trie.md"},b=n("h1",{id:"golang实现简单trie树",tabindex:"-1"},[g("Golang实现简单Trie树 "),n("a",{class:"header-anchor",href:"#golang实现简单trie树","aria-label":'Permalink to "Golang实现简单Trie树"'},"​")],-1),m=c("",5);function A(s,D,C,B,_,f){const p=t,h=e("ClientOnly");return l(),r("div",null,[b,E(h,null,{default:d(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),y(p,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),m])}const M=k(u,[["render",A]]);export{S as __pageData,M as default};
