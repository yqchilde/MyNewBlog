import{_ as t}from"./chunks/articleMetadata.DWCcJr9_.js";import{_ as k,B as e,a as r,u as E,E as d,e as n,H as g,ah as c,o as l,D as y,C as F}from"./chunks/framework.DYe01KkP.js";import"./chunks/theme.CjPOLnXW.js";const v=JSON.parse('{"title":"Golang实现简单Trie树","description":"Trie又称字典树，是N叉树的一种特殊形式。是一种存储大量字符串的树形数据结构，相当于`HashMap`，在存储单词中又比`HashMap`节省了很多的内存空间。`trie`树的根节点不存储内容，内容都在孩子节点上。","frontmatter":{"title":"Golang实现简单Trie树","description":"Trie又称字典树，是N叉树的一种特殊形式。是一种存储大量字符串的树形数据结构，相当于`HashMap`，在存储单词中又比`HashMap`节省了很多的内存空间。`trie`树的根节点不存储内容，内容都在孩子节点上。","date":"2020-03-28T11:20:13.000Z","categories":["后端"],"tags":["Golang"]},"headers":[],"relativePath":"blog/2020/golang-trie.md","filePath":"posts/blog/2020/golang-trie/README.md","lastUpdated":1713925892000}'),o={name:"blog/2020/golang-trie.md"},u=n("h1",{id:"golang实现简单trie树",tabindex:"-1"},[g("Golang实现简单Trie树 "),n("a",{class:"header-anchor",href:"#golang实现简单trie树","aria-label":'Permalink to "Golang实现简单Trie树"'},"​")],-1),b=c("",5);function m(s,A,D,C,B,_){const p=t,h=e("ClientOnly");return l(),r("div",null,[u,E(h,null,{default:d(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),y(p,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),b])}const S=k(o,[["render",m]]);export{v as __pageData,S as default};
